#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#
###############手动修改##############

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: 'Set LAN IP Address'
        required: true
        default: '192.168.6.1'
      WIFI_DRIVER_VERSION:
        description: 'Choose WiFi Driver Version'
        required: true
        default: 'v7.6.7.2-fw-20240823(recommend)'
        type: choice
        options:
        - v7.6.7.2-fw-20240823(recommend)
        - v7.6.6.1-fw-20230306(recommend)
        - v7.6.7.2-fw-default
        - v7.6.7.2-fw-20230306
        - v7.6.7.2-fw-20230330
        - v7.6.7.2-fw-20230411
        - v7.6.7.2-fw-20230717
        - v7.6.7.2-fw-20231024
        - v7.6.6.1-fw-default
        - v7.6.6.1-fw-20230330
        - v7.6.6.1-fw-20230411
        - v7.6.6.1-fw-20230717
        - v7.6.6.1-fw-20231024
        - v7.6.6.1-fw-20240823
      USE_NX30PRO_EEPROM:
        description: 'Use nx30pro eeprom and fixed WiFi MAC address'
        required: true
        default: true
        type: boolean
      USE_MTWIFI_CFG:
        description: 'Use luci-app-mtk wifi config'
        required: true
        default: false
        type: boolean
      USE_52MHZ:
        description: 'Use 52MHz max-frequency'
        required: true
        default: false
        type: boolean
      DO_NOT_BUILD_DOCKERMAN:
        description: 'Donot Build luci-app-dockerman'
        required: true
        default: false
        type: boolean
      SSH_TO_GITHUB_ACTIONS:
        description: 'SSH connection to Actions'
        required: false
        default: false
        type: boolean
#  schedule:
#    - cron: 0 16 * * *

env:
  ###############手动修改##############
  REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
  REPO_BRANCH: openwrt-21.02
  FEEDS_CONF: configs/feeds.conf.default
  CONFIG_FILE: configs/.config
  DIY_P1_SH: scripts/diy-part1.sh
  DIY_P2_SH: scripts/diy-part2.sh
  FREE_DISK_SH: scripts/free-disk-space.sh
  DEPENDS_SH: scripts/init_build_environment.sh
  CLASH_CORE_SH: scripts/preset-clash-core.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  OPENWRT_NAME: immortalwrt
  UPLOAD_TAG_NAME: mt7981-cmcc-rax3000m-emmc
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.OS }}
    strategy:
      matrix:
        REPO_BRANCH:
          - openwrt-21.02
        ARCHITECTURE:
          - cortexa53
        OS:
          - ubuntu-22.04
      fail-fast: false

    permissions:
      actions: write
      contents: write

    steps:
    - name: 初始化阶段：检出项目分支
      uses: actions/checkout@main

    - name: 初始化阶段：使用逻辑卷扩大 Github Actions 编译空间
      run: |
        mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
        root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
        sudo truncate -s "${mnt_size}"G /mnt/mnt.img
        sudo truncate -s "${root_size}"G /root.img
        sudo losetup /dev/loop6 /mnt/mnt.img
        sudo losetup /dev/loop7 /root.img
        sudo pvcreate /dev/loop6
        sudo pvcreate /dev/loop7
        sudo vgcreate github /dev/loop6 /dev/loop7
        sudo lvcreate -n runner -l 100%FREE github
        # 创建文件系统并挂载(xfs格式/ext4格式)
        sudo mkfs.xfs /dev/github/runner
        sudo mkdir -p /builder
        sudo mount /dev/github/runner /builder
        sudo chown -R $USER:$GROUPS /builder
        df -Th

    - name: 初始化阶段：设置编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq full-upgrade -y
        #chmod +x $DEPENDS_SH && $DEPENDS_SH
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2204)
        sudo -E apt-get -qq install libfuse-dev libncurses5-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
    
    - name: 初始化阶段：清理磁盘空间
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # when set to "true" but frees about 6 GB
        tool-cache: true
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true
    
    - name: 初始化阶段：检查服务器配置和磁盘空间情况
      run: |
        # 删除大文件和文件夹
        chmod +x $FREE_DISK_SH && $FREE_DISK_SH

        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 准备阶段：克隆固件源码
      working-directory: /builder
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
    
    - name: 准备阶段：缓存加速
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'  # 启用 ccache，加速构建
        mixkey: 'mt7981'  # 设置目标平台为 R5S 使用的 ramips
        prefix: 'openwrt' # 使用的源码前缀 ${{ github.workspace }}/openwrt  

    - name: 准备阶段：加载feeds.conf.default & 执行自定义脚本DIY_P1_SH
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 准备阶段：更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 准备阶段：安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 准备阶段：导入补丁文件 & 加载config & 执行自定义脚本DIY_P2_SH
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: 准备阶段：添加OpenClash核心
      run: |
        df -hT $PWD
        chmod +x $CLASH_CORE_SH
        cd openwrt
        $GITHUB_WORKSPACE/$CLASH_CORE_SH

    - name: 准备阶段：设置LAN IP地址（路由器登录地址）
      run: |
        cd openwrt
        SET_IP=${{ github.event.inputs.LAN_IP }}
        if [[ $SET_IP =~ ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
            #修改immortalwrt.lan关联IP
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" $(find feeds/luci/modules/luci-mod-system -type f -name "flash.js")
            #修改默认IP地址
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" package/base-files/files/bin/config_generate
            echo "Set LAN IP Address: $SET_IP"
        else
            echo "Invalid IP address, use default."
        fi

    - name: 准备阶段：设置WiFi驱动版本
      run: |
        cd openwrt
        wifi_driver=$(echo "${{ github.event.inputs.WIFI_DRIVER_VERSION }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        firmware=$(echo "${{ github.event.inputs.WIFI_DRIVER_VERSION }}" | sed -E 's/.*fw-([0-9]{8}|default).*/\1/g')
        if [ "$wifi_driver" == "v7.6.6.1" ]; then
                sed -i 's/CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7672=y/CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7661=y/g' .config
        fi
        if [ "$firmware" == "default" ]; then
                sed -i 's/CONFIG_MTK_MT_WIFI_MT7981_20240823=y/CONFIG_MTK_MT_WIFI_MT7981_DEFAULT_FIRMWARE=y/g' .config
        else
        	sed -i 's/CONFIG_MTK_MT_WIFI_MT7981_20240823=y/CONFIG_MTK_MT_WIFI_MT7981_${firmware}=y/g' .config
        fi
        echo "Use WiFi Driver: $wifi_driver-fw-$firmware"

    - name: 准备阶段：设置是否使用nx30pro的高功率eeprom, 并固定WiFi MAC地址
      if: github.event.inputs.USE_NX30PRO_EEPROM == 'true'
      run: |
        cd openwrt
        wifi_driver=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        if [ "$wifi_driver" == "v7.6.6.1" ]; then
                cp $GITHUB_WORKSPACE/eeprom/mt79xx_20220907-8b55f5_eeprom.tar.xz dl/mt79xx_20220907-8b55f5.tar.xz
        else
                cp $GITHUB_WORKSPACE/eeprom/mt79xx_20231229-4012a0_eeprom.tar.xz dl/mt79xx_20231229-4012a0.tar.xz
        fi
        ## 创建一个辅助文件。文件内容是写入MAC地址到dat文件，固定wifi MAC地址
        echo -e "\t\tlocal wifi0_mac=\"\$(mmc_get_mac_binary factory 0x04)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi0_mac/;b;}; \\\$aMacAddress=\$wifi0_mac\" /etc/wireless/mediatek/mt7981.dbdc.b0.dat
        \t\tlocal wifi1_mac=\"\$(macaddr_setbit_la \$wifi0_mac)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi1_mac/;b;}; \\\$aMacAddress=\$wifi1_mac\" /etc/wireless/mediatek/mt7981.dbdc.b1.dat" > temp_insert.txt
        ## 将文本内容写入02_network
        sed -i '/mediatek_setup_macs()/,/\};/ {/cmcc,rax3000m-emmc)/ {n;n;n;r temp_insert.txt
        }}' target/linux/mediatek/mt7981/base-files/etc/board.d/02_network

    - name: 准备阶段：设置无线控制界面样式(luci-app-mtk)
      if: github.event.inputs.USE_MTWIFI_CFG == 'true'
      run: |
        cd openwrt
        sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
        sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
        sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
        sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config

    - name: 准备阶段：设置RAX3000M的eMMC闪存使用52MHZ高频率
      if: github.event.inputs.USE_52MHZ == 'true'
      env:
        RAX3000M_EMMC_DTS_FILE: target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts
      run: |
        cd openwrt
        if ! grep -q 'cap-mmc-highspeed' "${{ env.RAX3000M_EMMC_DTS_FILE }}"; then
                sed -i -e '/bus-width = <8>;/ a\	cap-mmc-highspeed;' "${{ env.RAX3000M_EMMC_DTS_FILE }}"
        fi

    - name: 准备阶段：设置是否取消编译luci-app-dockerman
      if: github.event.inputs.DO_NOT_BUILD_DOCKERMAN == 'true'
      run: |
        cd openwrt
        sed -i '/CONFIG_PACKAGE_luci-app-dockerman=y/d' .config

    - name: 准备阶段：是否允许通过SSH 连接到 Github Actions
      if: github.event.inputs.SSH_TO_GITHUB_ACTIONS == 'true'
      uses: alan6288/ssh2actions@main
      with:
        mode: ngrok
      env:
        # After sign up on the https://ngrok.com
        # You can find this token here: https://dashboard.ngrok.com/auth/your-authtoken
        NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
        
        # ngrok server region [us, eu, au, ap, sa, jp, in] (optional, default: us)
        # You can find this server region here: https://ngrok.com/docs#global-locations
        NGROK_REGION: us
    
        # This password you will use when authorizing via SSH
        SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}

    - name: 编译阶段：下载安装包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译阶段：开始编译固件
      id: compile
      run: |
        # 执行编译
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j$(nproc) || make -j1 V=s
        # 编译后添加环境变量
        sed -n 's/.*lan) ipad=${ipaddr:-"\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)"} ;;.*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
        [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV
        if grep -q 'CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7661=y' .config; then
                echo "WIFI_VERSION=-v7661" >> $GITHUB_ENV
        else
                echo "WIFI_VERSION=-v7672" >> $GITHUB_ENV
        fi
        if [ ${{ github.event.inputs.USE_NX30PRO_EEPROM }} == 'true' ]; then
                echo "EEPROM=-eeprom" >> $GITHUB_ENV
        else
                echo "EEPROM=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' .config; then
                echo "WIFI_INTERFACE=-mtwifi" >> $GITHUB_ENV
        else
                echo "WIFI_INTERFACE=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' .config; then
                echo "BUILD_DOCKERMAN=-docker" >> $GITHUB_ENV
        else
                echo "BUILD_DOCKERMAN=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 编辑阶段：查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 发布阶段：上传固件目录到Actions Artifacts
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 发布阶段：整理固件文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: | 
        mapfile -t devices < <(grep '^CONFIG_TARGET_DEVICE.*=y' openwrt/.config | sed -r 's/.*DEVICE_(.*)=y/\1/')
        cd openwrt/bin/targets/*/*
        rm -rf *.buildinfo
        rm -rf *.json
        rm -rf *.manifest
        rm -rf packages

        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "FIRMWARE_NAME=${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}-${{ env.FILE_DATE }}" >> $GITHUB_ENV
        # 重命名
        #sudo -E apt-get -qq install rename
        #for val in "${devices[@]}"; do
        #  rename "s/.*${val}/${{ env.FIRMWARE_NAME }}/" *
        #  echo "$val"
        #done
        echo "status=success" >> $GITHUB_OUTPUT

    - name: 发布阶段：生成固件发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        touch release.txt
        echo -e "${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}" >> release.txt
        echo "- 💻 CPU架构: ${{ matrix.ARCHITECTURE }}" >> release.txt
        echo "- 📂 使用源码：${{ env.REPO_URL }}" >> release.txt
        echo "- 🌳 使用分支：${{ matrix.REPO_BRANCH }}" >> release.txt
        echo "- ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")" >> release.txt
        echo "- 🌐 登录地址: ${{ env.IP_ADDR }}" >> release.txt
        echo "- 👤 用户名: root" >> release.txt
        echo "- 🔒 密码: null" >> release.txt
        echo "- 📒 说明: 单网口设备默认网口为LAN，旁路由模式，需要接入主路由器后进后台查找对应IP地址访问，反之双网口设备默认网口为WAN+LAN，主路由模式。 " >> release.txt
        echo "- 使用WiFi驱动${{ github.event.inputs.WIFI_DRIVER }}" >> release.txt
        if [[ "${{ env.EEPROM }}" == '-eeprom' ]]; then
               echo "-    使用nx30pro高功率eeprom并固定WiFi MAC地址" >> release.txt
        else
               echo "-    未使用nx30pro高功率eeprom未固定WiFi MAC地址" >> release.txt
        fi
        if [[ "${{ env.WIFI_INTERFACE }}" == '-mtwifi' ]]; then
                echo "-    使用hanwckf mtwifi-cfg原生无线控制界面" >> release.txt
        else
                echo "-    使用mtk-sdk luci-app-mtk无线控制界面" >> release.txt
        fi
        if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                echo "-    已编译luci-app-dockerman" >> release.txt
        else
                echo "-    未编译luci-app-dockerman" >> release.txt
        fi
        max_frequency=$(($(grep -oP "max-frequency = <\K[0-9]*" openwrt/target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts) / 1000000))
        echo "-    使用闪存频率: ${max_frequency}MHz" >> release.txt
        echo "release_tag=${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}" >> $GITHUB_OUTPUT
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 发布阶段：发布固件至Release
      uses: softprops/action-gh-release@v2.1.0
      if: steps.tag.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.FIRMWARE_NAME }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
    
    - name: 发布阶段：删除旧发布的固件
      uses: dev-drprasad/delete-older-releases@master
      if: steps.compile.outputs.status == 'success' &&  env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 发布阶段：删除旧的编译过程
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 30
        keep_minimum_runs: 6

