name: Build iStore OS

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      LAN_IP:
        description: 'Set LAN IP Address'
        required: true
        default: '192.168.1.1'
      WIFI_DRIVER:
        description: 'Choose WiFi Driver'
        required: true
        default: 'v7.6.7.2-fw-20240823(recommend)'
        type: choice
        options:
        - v7.6.7.2-fw-20240823(recommend)
        - v7.6.6.1-fw-20230306(recommend)
        - v7.6.7.2-fw-default
        - v7.6.7.2-fw-20230306
        - v7.6.7.2-fw-20230330
        - v7.6.7.2-fw-20230411
        - v7.6.7.2-fw-20230717
        - v7.6.7.2-fw-20231024
        - v7.6.6.1-fw-default
        - v7.6.6.1-fw-20230330
        - v7.6.6.1-fw-20230411
        - v7.6.6.1-fw-20230717
        - v7.6.6.1-fw-20231024
        - v7.6.6.1-fw-20240823
      EEPROM:
        description: 'Use nx30pro eeprom and fixed WiFi MAC address'
        required: true
        default: true
        type: boolean
      APP_MTK:
        description: 'Use luci-app-mtk wifi config'
        required: true
        default: false
        type: boolean
      NO_DOCKERMAN:
        description: 'Not build luci-app-dockerman'
        required: true
        default: false
        type: boolean
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 16 * * *

env:
  ###############手动修改##############
  ##因为是两个设备，所以手动设置上传时候的打包名称和tag名称UPLOAD_TAG_NAME
  OPENWRT_NAME: hanwckf
  UPLOAD_TAG_NAME: rax3000m-emmc_xr30-emmc
  REPO_URL: https://github.com/istoreos/istoreos
  #REPO_BRANCH: ${{ matrix.REPO_BRANCH }}
  RAX3000M_EMMC_DTS_FILE: target/linux/mediatek/files-5.4/arch/arm64/boot/dts/mediatek/mt7981-cmcc-rax3000m-emmc.dts
  FEEDS_CONF: RAX3000M-eMMC_XR30-eMMC-hanwckf/feeds.conf.default
  CONFIG_FILE: RAX3000M-eMMC_XR30-eMMC-hanwckf/.config
  DIY_P1_SH: RAX3000M-eMMC_XR30-eMMC-hanwckf/diy-part1.sh
  DIY_P2_SH: RAX3000M-eMMC_XR30-eMMC-hanwckf/diy-part2.sh
  SSH_ACTIONS: false
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        REPO_BRANCH:
          # - main
          # - istoreos-24.10
          - istoreos-22.03
        ARCHITECTURE:
          - rk35xx
        os:
          - ubuntu-22.04

      fail-fast: false

    steps:
    - name: 准备完成
      uses: actions/checkout@main

    - name: 检查服务器配置
      run: |
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo -e "------------------------------- CPU信息 -------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息: $(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo -e "------------------------------- 内存信息 -------------------------------\n"
        echo "已安装内存详细信息: "
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo -e "------------------------------- 磁盘信息 -------------------------------\n"
        echo -e "磁盘数量: $(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "------------------------------- 磁盘详情 -------------------------------\n"
        df -Th

    - name: 初始化编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        echo "------------------------------- 更新并安装依赖 -------------------------------"
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends/${{ matrix.os }})
        wget https://bootstrap.pypa.io/pip/3.6/get-pip.py
        sudo python3 get-pip.py
        sudo rm -rf get-pip.py
        sudo pip install pyelftools
        echo "------------------------------- 清理Docker镜像和软件 -------------------------------"
        docker rmi `docker images -q`
        docker image prune -a -f
        sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* android* || true
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        echo "------------------------------- 设置工作目录及时区 -------------------------------"
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: 清理磁盘空间(Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # when set to "true" but frees about 6 GB
        tool-cache: true
        
        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: false
        dotnet: false
        haskell: false
        large-packages: false
        swap-storage: false
        
    - name: 克隆源码
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b ${{ matrix.REPO_BRANCH }} openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: 缓存构建动作
      uses: klever1988/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.os }}-${{ matrix.ARCHITECTURE }}-${{ matrix.REPO_BRANCH }}
        prefix: ${{ github.workspace }}/openwrt

    - name: 加载自定义 feeds.conf.default & DIY_P1_SH
      env:
        FEEDS_CONF_PATH: ${{ matrix.ARCHITECTURE }}/${{ env.FEEDS_CONF }}
      run: |
        [ -e $FEEDS_CONF_PATH ] && mv $FEEDS_CONF_PATH openwrt/$FEEDS_CONF
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: 更新 feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: 安装 feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置 .config & DIY_P2_SH
      env:
        CONFIG_FILE_PATH: ${{ matrix.ARCHITECTURE }}/${{ env.CONFIG_FILE }}
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE_PATH ] && mv $CONFIG_FILE_PATH openwrt/$CONFIG_FILE
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: 设置RAX3000M-eMMC的eMMC使用highspeed
      run: |
        cd openwrt
        if ! grep -q 'cap-mmc-highspeed' "${{ env.RAX3000M_EMMC_DTS_FILE }}"; then
                sed -i -e '/bus-width = <8>;/ a\	cap-mmc-highspeed;' "${{ env.RAX3000M_EMMC_DTS_FILE }}"
        fi

    - name: 设置LAN IP地址（路由器登录地址）
      run: |
        cd openwrt
        SET_IP=${{ github.event.inputs.LAN_IP }}
        if [[ $SET_IP =~ ^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
            #修改immortalwrt.lan关联IP
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" $(find feeds/luci/modules/luci-mod-system -type f -name "flash.js")
            #修改默认IP地址
            sed -i "s/192\.168\.[0-9]*\.[0-9]*/$SET_IP/g" package/base-files/files/bin/config_generate
            echo "Set LAN IP Address: $SET_IP"
        else
            echo "Invalid IP address, use default."
        fi

    - name: 设置WiFi驱动版本
      run: |
        cd openwrt
        wifi_driver=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        firmware=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/.*fw-([0-9]{8}|default).*/\1/g')
        if [ "$wifi_driver" == "v7.6.6.1" ]; then
                sed -i 's/CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7672=y/CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7661=y/g' .config
        fi
        if [ "$firmware" == "default" ]; then
                sed -i 's/CONFIG_MTK_MT_WIFI_MT7981_20240823=y/CONFIG_MTK_MT_WIFI_MT7981_DEFAULT_FIRMWARE=y/g' .config
        else
        	sed -i 's/CONFIG_MTK_MT_WIFI_MT7981_20240823=y/CONFIG_MTK_MT_WIFI_MT7981_${firmware}=y/g' .config
        fi
        echo "Use WiFi Driver: $wifi_driver-fw-$firmware"

    - name: 使用nx30pro的高功率eeprom并固定WiFi MAC地址
      if: github.event.inputs.EEPROM == 'true'
      run: |
        cd openwrt
        wifi_driver=$(echo "${{ github.event.inputs.WIFI_DRIVER }}" | sed -E 's/^(v[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+).*/\1/')
        if [ "$wifi_driver" == "v7.6.6.1" ]; then
                cp $GITHUB_WORKSPACE/RAX3000M-eMMC_XR30-eMMC-hanwckf/mt79xx_20220907-8b55f5_eeprom.tar.xz dl/mt79xx_20220907-8b55f5.tar.xz
        else
                cp $GITHUB_WORKSPACE/RAX3000M-eMMC_XR30-eMMC-hanwckf/mt79xx_20231229-4012a0_eeprom.tar.xz dl/mt79xx_20231229-4012a0.tar.xz
        fi
        ## 创建一个辅助文件。文件内容是写入MAC地址到dat文件，固定wifi MAC地址
        echo -e "\t\tlocal wifi0_mac=\"\$(mmc_get_mac_binary factory 0x04)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi0_mac/;b;}; \\\$aMacAddress=\$wifi0_mac\" /etc/wireless/mediatek/mt7981.dbdc.b0.dat
        \t\tlocal wifi1_mac=\"\$(macaddr_setbit_la \$wifi0_mac)\"
        \t\tsed -i \"/^MacAddress=.*/ {s/.*/MacAddress=\$wifi1_mac/;b;}; \\\$aMacAddress=\$wifi1_mac\" /etc/wireless/mediatek/mt7981.dbdc.b1.dat" > temp_insert.txt
        ## 将文本内容写入02_network
        sed -i '/mediatek_setup_macs()/,/\};/ {/cmcc,rax3000m-emmc)/ {n;n;n;r temp_insert.txt
        }}' target/linux/mediatek/mt7981/base-files/etc/board.d/02_network

    - name: 使用luci-app-mtk无线配置
      if: github.event.inputs.APP_MTK == 'true'
      run: |
        cd openwrt
        sed -i 's/CONFIG_PACKAGE_luci-app-mtwifi-cfg=y/CONFIG_PACKAGE_luci-app-mtk=y/g' .config
        sed -i 's/CONFIG_PACKAGE_luci-i18n-mtwifi-cfg-zh-cn=y/CONFIG_PACKAGE_luci-i18n-mtk-zh-cn=y/g' .config
        sed -i 's/CONFIG_PACKAGE_mtwifi-cfg=y/CONFIG_PACKAGE_wifi-profile=y/g' .config
        sed -i 's/CONFIG_PACKAGE_lua-cjson=y/CONFIG_WIFI_NORMAL_SETTING=y/g' .config

    - name: 取消编译dockerman
      if: github.event.inputs.NO_DOCKERMAN == 'true'
      run: |
        cd openwrt
        sed -i '/CONFIG_PACKAGE_luci-app-dockerman=y/d' .config

    - name: SSH 连接到 Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s

        sed -n 's/.*lan) ipad=${ipaddr:-"\([0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+\)"} ;;.*/\1/p' package/base-files/files/bin/config_generate | head -n 1 > IP_ADDR
        [ -s IP_ADDR ] && echo "IP_ADDR=$(cat IP_ADDR)" >> $GITHUB_ENV
        if grep -q 'CONFIG_MTK_MT_WIFI_DRIVER_VERSION_7661=y' .config; then
                echo "WIFI_VERSION=-v7661" >> $GITHUB_ENV
        else
                echo "WIFI_VERSION=-v7672" >> $GITHUB_ENV
        fi
        if [ ${{ github.event.inputs.EEPROM }} == 'true' ]; then
                echo "EEPROM=-eeprom" >> $GITHUB_ENV
        else
                echo "EEPROM=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_mtwifi-cfg=y' .config; then
                echo "WIFI_INTERFACE=-mtwifi" >> $GITHUB_ENV
        else
                echo "WIFI_INTERFACE=" >> $GITHUB_ENV
        fi
        if grep -q 'CONFIG_PACKAGE_luci-app-dockerman=y' .config; then
                echo "BUILD_DOCKERMAN=-docker" >> $GITHUB_ENV
        else
                echo "BUILD_DOCKERMAN=" >> $GITHUB_ENV
        fi
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 查看磁盘使用情况
      if: (!cancelled())
      run: df -hT

    - name: 上传 bin 文件夹
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true' && !cancelled()
      with:
        name: OpenWrt_bin${{ env.FILE_DATE }}
        path: openwrt/bin

    - name: 整理固件文件
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 生成发布标签
      id: tag
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=$(date +"%Y.%m.%d-%H.%M")" >> ${GITHUB_OUTPUT}
        touch release.txt
        echo "- 💻 架构: ${{ matrix.ARCHITECTURE }}" >> release.txt
        echo "- 📂 源码：${{ env.REPO_URL }}" >> release.txt
        echo "- 🌳 分支：${{ matrix.REPO_BRANCH }}" >> release.txt
        echo "- ⏱️ 编译时间: $(date +"%Y年%m月%d日%H时%M分")" >> release.txt
        echo "- 🌐 登录地址: ${{ env.IP_ADDR }}" >> release.txt
        echo "- 👤 用户名: root" >> release.txt
        echo "- 🔒 密码: password" >> release.txt
        echo "- 📒 说明1: 单网口设备默认网口为LAN，旁路由模式，需要接入主路由器后进后台查找对应IP地址访问，反之双网口设备默认网口为WAN+LAN，主路由模式。 " >> release.txt
        echo "- 📒 说明2: 使用WiFi驱动${{ github.event.inputs.WIFI_DRIVER }}" >> release.txt
        if [[ "${{ env.EEPROM }}" == '-eeprom' ]]; then
               echo "-    使用nx30pro高功率eeprom并固定WiFi MAC地址" >> release.txt
        else
               echo "-    未使用nx30pro高功率eeprom未固定WiFi MAC地址" >> release.txt
        fi
        if [[ "${{ env.WIFI_INTERFACE }}" == '-mtwifi' ]]; then
                echo "-    使用hanwckf mtwifi-cfg原生luci无线配置工具" >> release.txt
        else
                echo "-    使用mtk-sdk luci-app-mtk无线配置工具" >> release.txt
        fi
        if [[ "${{ env.BUILD_DOCKERMAN }}" == '-docker' ]]; then
                echo "-    已编译luci-app-dockerman" >> release.txt
        else
                echo "-    未编译luci-app-dockerman" >> release.txt
        fi
        📒 说明: 单网口设备默认网口为LAN，旁路由模式，需要接入主路由器后进后台查找对应IP地址访问，反之双网口设备默认网口为WAN+LAN，主路由模式。 " >> release.txt
        echo "release_tag=${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}" >> $GITHUB_OUTPUT
        
        echo "status=success" >> ${GITHUB_OUTPUT}

    - name: 自动发布固件到 Releases
      uses: softprops/action-gh-release@v2
      if: steps.tag.outputs.status == 'success' && !cancelled()
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.FILE_DATE }}-${{ env.OPENWRT_NAME }}-${{ env.UPLOAD_TAG_NAME }}${{ env.WIFI_VERSION }}${{ env.EEPROM }}${{ env.BUILD_DOCKERMAN }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        
    - name: 删除运行记录
      uses: xiaomeng9597/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 1
        token: ${{ env.GITHUB_TOKEN }}

    - name: 删除自动发布的旧固件
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 5
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
